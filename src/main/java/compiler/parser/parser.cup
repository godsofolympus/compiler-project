package compiler.parser;

import java.util.*;
import java_cup.runtime.*;
import compiler.scanner.*;
import compiler.AST.*;
import compiler.models.*;

// user code components
parser code {:  
                private Lexer scanner;

                public Parser(Lexer scanner) {
                    this.scanner = scanner;
                } 
            :};
scan with {: return scanner.next_token(); :};

// symbol lists
terminal            VOID, INT, DOUBLE, BOOL, STRING;
terminal            CLASS, INTERFACE, THIS, EXTENDS, IMPLEMENTS;
terminal            FOR, WHILE, IF, ELSE, RETURN, BREAK, CONTINUE;
terminal            NEW, NEW_ARRAY, PRINT, READ_INTEGER, READ_LINE;
terminal            DTOI, ITOD, BTOI, ITOB;
terminal            PRIVATE, PROTECTED, PUBLIC, IMPORT;

terminal            PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal            UMINUS, NOT;
terminal            LESS, LESS_EQUAL, GREATER, GREATER_EQUAL, EQUAL, EQUAL_EQUAL, NOT_EQUAL, OR_OR, AND_AND;
terminal            SEMICOLON, COMMA, DOT, BRACKETS_LEFT_RIGHT, BRACKETS_LEFT, BRACKETS_RIGHT, PARANTHESIS_LEFT, PARANTHESIS_RIGHT, CURLY_BRACKETS_LEFT,
                    CURLY_BRACKETS_RIGHT;

terminal Integer    INT_CONSTANT;
terminal Double     DOUBLE_CONSTANT;
terminal Boolean    BOOL_CONSTANT;
terminal String     STRING_CONSTANT;
terminal             NULL;

terminal String     IDENTIFIER;


non terminal Program Program;
non terminal Decl Decl;
non terminal LinkedList<Decl> DeclStar;
non terminal LinkedList<Decl.VariableDecl> VariableDeclStar;
non terminal Decl.VariableDecl VariableDecl;
non terminal Variable Variable;
non terminal Type Type;
non terminal Type PrimitiveType;
non terminal LinkedList<Variable> Formals;
non terminal StmtBlock StmtBlock;
non terminal LinkedList<Stmt> StmtStar;
non terminal Stmt Stmt;
non terminal Decl.FunctionDecl FunctionDecl;
non terminal LValue LValue;
non terminal Expr Expr;
non terminal Constant Constant;
non terminal Call Call;
non terminal LinkedList<Expr> Actuals;
non terminal LinkedList<Expr> ExprPlusComma;
non terminal Expr ExprOptional;
non terminal Stmt ElseStmtOptional;
non terminal Stmt IfStmt;
non terminal Stmt WhileStmt;
non terminal Stmt ForStmt;
non terminal Stmt ReturnStmt;
non terminal Stmt PrintStmt;
non terminal String ClassDeclExtends;
non terminal LinkedList<String> ClassDeclImplements;
non terminal LinkedList<String> IdentifierStar;
non terminal LinkedList<ClassField> ClassDeclFields;
non terminal AccessMode AccessMode;
non terminal ClassField Field;
non terminal Decl ClassDecl;
non terminal Decl InterfaceDecl;
non terminal Prototype Prototype;
non terminal LinkedList<Prototype> PrototypeStar;

non terminal        Macro, MacroStar, BreakStmt, ContinueStmt;


// precedence and associativity declarations
precedence left ELSE;
precedence right EQUAL;
precedence left OR_OR;
precedence left AND_AND;
precedence left EQUAL_EQUAL, NOT_EQUAL;
precedence left LESS, LESS_EQUAL, GREATER, GREATER_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right NOT, UMINUS;
precedence left BRACKETS_LEFT, DOT;
precedence left PARANTHESIS_LEFT;

// the grammar
start with Program;

Program ::= MacroStar Decl:d DeclStar:ds    {: ds.add(d); RESULT = new Program(ds); :};

Macro ::= IMPORT STRING_CONSTANT;
MacroStar ::= Macro MacroStar | /* epsilon */;

Decl
    ::= VariableDecl:v {: RESULT = v; :}
    | FunctionDecl:f {: RESULT = f; :}
    | ClassDecl:c {: RESULT = c; :}
    | InterfaceDecl:i {: RESULT = i; :}
    ;

DeclStar
    ::= Decl:d DeclStar:ds   {: ds.add(d); RESULT = ds; :}
    |   {: RESULT = new LinkedList<Decl>(); :}
    ;

VariableDeclStar
    ::= VariableDeclStar:vs VariableDecl:v {: vs.add(v); RESULT = vs; :}
    |   {:RESULT = new LinkedList<Decl.VariableDecl>(); :}
    ;

VariableDecl        ::= Variable:v SEMICOLON {: RESULT = Decl.variableDecl(v); :};
Variable            ::= Type:t IDENTIFIER:id {: RESULT = new Variable(t, id); :};

PrimitiveType
    ::= INT {: RESULT = Type.PrimitiveType.NumberType.integerType(); :}
    | DOUBLE {: RESULT = Type.PrimitiveType.NumberType.doubleType(); :}
    | BOOL {: RESULT = Type.PrimitiveType.booleanType(); :}
    | STRING {: RESULT = Type.PrimitiveType.stringType(null); :}
    ;

Type
    ::= PrimitiveType:pt {: RESULT = pt; :}
    | IDENTIFIER:id {: RESULT =  Type.nonPrimitiveType(id); :}
    | Type:t BRACKETS_LEFT_RIGHT {: RESULT = Type.arrayType(t); :}
    ;

FunctionDecl
    ::= Type:t IDENTIFIER:id PARANTHESIS_LEFT Formals:f PARANTHESIS_RIGHT StmtBlock:sb {: RESULT = Decl.functionDecl(id, t, f, sb); :}
    |   VOID IDENTIFIER:id PARANTHESIS_LEFT Formals:f PARANTHESIS_RIGHT StmtBlock:sb {: RESULT = Decl.functionDecl(id, Type.voidType(), f, sb); :}
    ;

Formals
    ::= Variable:v {: LinkedList<Variable> list = new LinkedList<>(); list.add(v); RESULT = list; :}
    | Formals:f COMMA Variable:v {: f.add(v); RESULT = f; :}
    | {: RESULT = new LinkedList<Variable>(); :} /* epsilon */
    ;

ClassDecl
    ::= CLASS IDENTIFIER:id ClassDeclExtends:ce ClassDeclImplements:ci CURLY_BRACKETS_LEFT ClassDeclFields:cf CURLY_BRACKETS_RIGHT
    {: RESULT = Decl.classDecl(id, ce, ci, cf); :};

ClassDeclExtends    ::= EXTENDS IDENTIFIER:id {: RESULT = id; :} | /* epsilon */ ;
ClassDeclImplements ::= IMPLEMENTS IdentifierStar:ids {: RESULT = ids; :} | {: RESULT = new LinkedList<String>(); :} /* epsilon */ ;

IdentifierStar
    ::= IDENTIFIER:id {: LinkedList<String> ids = new LinkedList<String>(); ids.add(id); RESULT = ids; :}
    | IdentifierStar:ids COMMA IDENTIFIER:id {: ids.add(id); RESULT = ids; :};

ClassDeclFields     ::= ClassDeclFields:fs Field:f {: fs.add(f); RESULT = fs; :} | {: RESULT = new LinkedList<ClassField>(); :} /* epsilon */ ;

Field
    ::= AccessMode:am VariableDecl:v {: RESULT = ClassField.varField(am, v); :}
    | AccessMode:am FunctionDecl:fd {: RESULT = ClassField.methodField(am, fd); :};

AccessMode
    ::= PRIVATE {: RESULT = AccessMode.PRIVATE; :}
    | PROTECTED {: RESULT = AccessMode.PROTECTED; :}
    | PUBLIC {: RESULT = AccessMode.PUBLIC; :}
    | /* epsilon */ ;

InterfaceDecl       ::= INTERFACE IDENTIFIER:id CURLY_BRACKETS_LEFT PrototypeStar:ps CURLY_BRACKETS_RIGHT {: RESULT = Decl.interfaceDecl(id, ps); :};
PrototypeStar       ::= PrototypeStar:ps Prototype:p {: ps.add(p); RESULT = ps; :} | {: RESULT = new LinkedList<Prototype>(); :} /* epsilon */ ;

Prototype
    ::= Type:t IDENTIFIER:id PARANTHESIS_LEFT Formals:f PARANTHESIS_RIGHT SEMICOLON {: RESULT = new Prototype(t, id, f); :}
    | VOID IDENTIFIER:id PARANTHESIS_LEFT Formals:f PARANTHESIS_RIGHT SEMICOLON {: RESULT = new Prototype(null, id, f); :}
    ;

StmtBlock           ::= CURLY_BRACKETS_LEFT VariableDeclStar:vs StmtStar:ss CURLY_BRACKETS_RIGHT {: RESULT = new StmtBlock(vs, ss); :};

StmtStar
    ::= Stmt:s StmtStar:ss {: ss.add(0, s); RESULT = ss; :}
    | {: RESULT = new LinkedList<Stmt>(); :}/* epsilon */
    ;

Stmt
    ::= PrintStmt:s {: RESULT = s; :}
    | IfStmt:s {: RESULT = s; :}
    | WhileStmt:s {: RESULT = s; :}
    | ForStmt:s {: RESULT = s; :}
    | BreakStmt {: RESULT = Stmt.breakStmt(); :}
    | ContinueStmt {: RESULT = Stmt.continueStmt(); :}
    | ReturnStmt:s {: RESULT = s; :}
    | StmtBlock:sb {: RESULT = Stmt.blockStmt(sb); :}
    | ExprOptional:e SEMICOLON {: RESULT = Stmt.exprStmt(e); :}
    ;

ExprOptional
    ::= Expr:e {: RESULT = e; :}
    | /* epsilon */ ;

IfStmt              ::= IF PARANTHESIS_LEFT Expr:cond PARANTHESIS_RIGHT Stmt:s ElseStmtOptional:el {: RESULT = Stmt.ifStmt(cond, s, el); :};
ElseStmtOptional    ::= ELSE Stmt:s {: RESULT = s; :} | /* epsilon */ ;
WhileStmt           ::= WHILE PARANTHESIS_LEFT Expr:cond PARANTHESIS_RIGHT Stmt:s {: RESULT = Stmt.whileStmt(cond, s); :};

ForStmt
    ::= FOR PARANTHESIS_LEFT ExprOptional:i SEMICOLON Expr:c SEMICOLON ExprOptional:u PARANTHESIS_RIGHT Stmt:s {: RESULT = Stmt.forStmt(i, c, u, s); :}
    ;

ReturnStmt          ::= RETURN ExprOptional:e SEMICOLON {: RESULT = Stmt.returnStmt(e); :};
BreakStmt           ::= BREAK SEMICOLON;
ContinueStmt        ::= CONTINUE SEMICOLON;
PrintStmt           ::= PRINT PARANTHESIS_LEFT ExprPlusComma:es PARANTHESIS_RIGHT SEMICOLON {: RESULT = Stmt.printStmt(es); :};

ExprPlusComma
    ::= Expr:e {: LinkedList<Expr> exprs = new LinkedList<>(); exprs.add(e); RESULT = exprs; :}
    | ExprPlusComma:es COMMA Expr:e {: es.add(e); RESULT = es; :}
    ;

Expr
    ::= LValue:l EQUAL Expr:r {:RESULT = Expr.assignExpr(l, r); :}
    | Constant:c {: RESULT = Expr.constExpr(c); :}
    | LValue:lv {: RESULT = Expr.lValExpr(lv); :}
    | THIS {: RESULT = Expr.thisExpr(); :}
    | Call:c {: RESULT = Expr.callExpr(c); :}
    | PARANTHESIS_LEFT Expr:e PARANTHESIS_RIGHT {: RESULT = e; :}
    | Expr:e1 PLUS Expr:e2 {: RESULT = Expr.BinOpExpr.ArithExpr.addExpr(e1, e2); :}
    | Expr:e1 MINUS Expr:e2 {: RESULT = Expr.BinOpExpr.ArithExpr.subExpr(e1, e2); :}
    | Expr:e1 MULTIPLY Expr:e2 {: RESULT = Expr.BinOpExpr.ArithExpr.multExpr(e1, e2); :}
    | Expr:e1 DIVIDE Expr:e2 {: RESULT = Expr.BinOpExpr.ArithExpr.divExpr(e1, e2); :}
    | Expr:e1 MOD Expr:e2 {: RESULT = Expr.BinOpExpr.ArithExpr.modExpr(e1, e2); :}
    | MINUS Expr:e {: RESULT = Expr.UnOpExpr.ArithExpr.minusExpr(e); :}
    | Expr:e1 LESS Expr:e2 {: RESULT = Expr.BinOpExpr.CompExpr.lessExpr(e1, e2); :}
    | Expr:e1 LESS_EQUAL Expr:e2 {: RESULT = Expr.BinOpExpr.CompExpr.lessEqExpr(e1, e2); :}
    | Expr:e1 GREATER Expr:e2 {: RESULT = Expr.BinOpExpr.CompExpr.greaterExpr(e1, e2); :}
    | Expr:e1 GREATER_EQUAL Expr:e2 {: RESULT = Expr.BinOpExpr.CompExpr.greaterEqExpr(e1, e2); :}
    | Expr:e1 EQUAL_EQUAL Expr:e2 {: RESULT = Expr.BinOpExpr.CompExpr.eqExpr(e1, e2); :}
    | Expr:e1 NOT_EQUAL Expr:e2 {: RESULT = Expr.BinOpExpr.CompExpr.notEqExpr(e1, e2); :}
    | Expr:e1 AND_AND Expr:e2 {: RESULT = Expr.BinOpExpr.LogicalExpr.andExpr(e1, e2); :}
    | Expr:e1 OR_OR Expr:e2 {: RESULT = Expr.BinOpExpr.LogicalExpr.orExpr(e1, e2); :}
    | NOT Expr:e {: RESULT = Expr.UnOpExpr.LogicalExpr.notExpr(e); :}
    | READ_INTEGER PARANTHESIS_LEFT PARANTHESIS_RIGHT {: RESULT = Expr.FunctionExpr.readIntExpr(); :}
    | READ_LINE PARANTHESIS_LEFT PARANTHESIS_RIGHT {: RESULT = Expr.FunctionExpr.readLineExpr(); :}
    | NEW IDENTIFIER:id {: RESULT = Expr.InitExpr.objInit(id); :}
    | NEW_ARRAY PARANTHESIS_LEFT Expr:e COMMA Type:t PARANTHESIS_RIGHT {: RESULT = Expr.InitExpr.arrInit(e, t); :}
    | ITOD PARANTHESIS_LEFT Expr:e PARANTHESIS_RIGHT {: RESULT = Expr.FunctionExpr.itodExpr(e); :}
    | DTOI PARANTHESIS_LEFT Expr:e PARANTHESIS_RIGHT {: RESULT = Expr.FunctionExpr.dtoiExpr(e); :}
    | ITOB PARANTHESIS_LEFT Expr:e PARANTHESIS_RIGHT {: RESULT = Expr.FunctionExpr.itobExpr(e); :}
    | BTOI PARANTHESIS_LEFT Expr:e PARANTHESIS_RIGHT {: RESULT = Expr.FunctionExpr.btoiExpr(e); :}
    ;

LValue
    ::= IDENTIFIER:id {: RESULT = LValue.simpleLVal(id); :}
    | Expr:e DOT IDENTIFIER:id {: RESULT = LValue.dottedLVal(e, id); :}
    | Expr:e BRACKETS_LEFT Expr:idx BRACKETS_RIGHT {: RESULT = LValue.indexedLVal(e, idx); :}
    ;

Call
    ::= IDENTIFIER:id PARANTHESIS_LEFT Actuals:a PARANTHESIS_RIGHT {: RESULT = Call.simpleCall(id, a); :}
    | Expr:e DOT IDENTIFIER:id PARANTHESIS_LEFT Actuals:a PARANTHESIS_RIGHT {: RESULT = Call.dottedCall(e, id, a); :}
    ;

Actuals
    ::= ExprPlusComma:es {: RESULT = es; :}
    | {: RESULT = new LinkedList<Expr>(); :} /* epsilon */
    ;

Constant
    ::= INT_CONSTANT:i {: RESULT = Constant.intConst(i); :}
    | DOUBLE_CONSTANT:d {: RESULT = Constant.doubleConst(d); :}
    | BOOL_CONSTANT:b {: RESULT = Constant.boolConst(b); :}
    | STRING_CONSTANT:s {: RESULT = Constant.stringConst(s); :}
    | NULL {: RESULT = Constant.nullConst(); :}
    ;