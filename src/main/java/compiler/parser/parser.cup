package compiler.parser;

import java_cup.runtime.*;
import compiler.scanner.*;

// user code components
parser code {:  
                private Lexer scanner;

                public parser(Lexer scanner) {
                    this.scanner = scanner;
                } 
            :};
init with {: scanner.init() :};
scan with {: return scanner.next_token(); :};

// symbol lists
terminal            VOID, INT, DOUBLE, BOOL, STRING;
terminal            CLASS, INTERFACE, THIS, EXTENDS, IMPLEMENTS;
terminal            FOR, WHILE, IF, ELSE, RETURN, BREAK, CONTINUE;
terminal            NEW, NEW_ARRAY, PRINT, READ_INTEGER, READ_LINE;
terminal            DTOI, ITOD, BTOI, ITOB;
terminal            PRIVATE, PROTECTED, PUBLIC, IMPORT;

terminal            PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal            UMINUS, NOT;
terminal            LESS, LESS_EQUAL, GREATER, GREATER_EQUAL, EQUAL, EQUAL_EQUAL, NOT_EUQAL, OR_OR, AND_AND;
terminal            SEMICOLON, COMMA, DOT, BRACKETS_LEFT, BRACKETS_RIGHT, PARANTHESIS_LEFT, PARANTHESIS_RIGHT, CURLY_BRACKETS_LEFT,
                    CURLY_BRACKETS_RIGHT;

terminal Integer    INT_CONSTANT;
terminal Double     DOUBLE_CONSTANT;
terminal Boolean    BOOL_CONSTANT;
terminal String     STRING_CONSTANT;
terminal String     NULL;

terminal String     IDENTIFIER;


non terminal        Program, Macro, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, AccessMode,
                    InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, ContinueStmt,
                    PrintStmt, Actuals;

non terminal        ClassDeclExtends, ClassDeclImplements, ClassDeclFields, IdentifierStar, PrototypeStar, VariableDeclStar, StmtStar,
                    ExprOptional, ElseStmtOptional, StmtOptional, ExprPlusComma;

non terminal Object Constant;
non terminal Object LValue;
non terminal Object Expr;
non terminal Object Call;

// precedence and associativity declarations
precedence left ELSE;
precedence right EQUAL;
precedence left OR_OR;
precedence left AND_AND;
precedence left EQUAL_EQUAL, NOT_EUQAL;
precedence left LESS, LESS_EQUAL, GREATER, GREATER_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right NOT, UMINUS;
precedence left BRACKETS_LEFT, DOT;
precedence left PARANTHESIS_LEFT;

// the grammar
start with Program;

Program             ::= Decl | Program Decl | Macro Program;
Macro               ::= IMPORT STRING_CONSTANT;
Decl                ::= VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl;
VariableDecl        ::= Variable SEMICOLON;
Variable            ::= Type IDENTIFIER;
Type                ::= INT | DOUBLE | BOOL | STRING | IDENTIFIER | Type BRACKETS_LEFT BRACKETS_RIGHT;
FunctionDecl        ::= Type IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT StmtBlock |
                        VOID IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT StmtBlock;
Formals             ::= Variable | Formals COMMA Variable |  /* epsilon */;
ClassDecl           ::= CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements CURLY_BRACKETS_LEFT ClassDeclFields CURLY_BRACKETS_RIGHT;
ClassDeclExtends    ::= EXTENDS IDENTIFIER | /* epsilon */ ;
ClassDeclImplements ::= IMPLEMENTS IdentifierStar | /* epsilon */ ;
IdentifierStar      ::= IDENTIFIER | IdentifierStar COMMA IDENTIFIER;
ClassDeclFields     ::= ClassDeclFields Field | /* epsilon */ ;
Field               ::= AccessMode VariableDecl | AccessMode FunctionDecl;
AccessMode          ::= PRIVATE | PROTECTED | PUBLIC | /* epsilon */ ;
InterfaceDecl       ::= INTERFACE IDENTIFIER CURLY_BRACKETS_LEFT PrototypeStar CURLY_BRACKETS_RIGHT;
PrototypeStar       ::= PrototypeStar Prototype | /* epsilon */ ;
Prototype           ::= Type IdentifierStar PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT SEMICOLON |
                        VOID IdentifierStar PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT SEMICOLON;
StmtBlock           ::= CURLY_BRACKETS_LEFT VariableDeclStar StmtStar CURLY_BRACKETS_RIGHT;
VariableDeclStar    ::= VariableDeclStar VariableDecl | /* epsilon */ ;
StmtStar            ::= StmtStar Stmt | /* epsilon */ ;
Stmt                ::= ExprOptional SEMICOLON | IfStmt | WhileStmt | ForStmt | BreakStmt | ContinueStmt | ReturnStmt | PrintStmt | StmtBlock;
ExprOptional        ::= Expr | /* epsilon */ ;
IfStmt              ::= IF PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT Stmt ElseStmtOptional;
ElseStmtOptional    ::= ELSE Stmt | /* epsilon */ ;
WhileStmt           ::= WHILE PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT Stmt;
ForStmt             ::= FOR PARANTHESIS_LEFT StmtOptional SEMICOLON Stmt SEMICOLON StmtOptional PARANTHESIS_RIGHT Stmt;
StmtOptional        ::= Stmt | /* epsilon */ ;
ReturnStmt          ::= RETURN ExprOptional SEMICOLON;
BreakStmt           ::= BREAK SEMICOLON;
ContinueStmt        ::= CONTINUE SEMICOLON;
PrintStmt           ::= PRINT PARANTHESIS_LEFT ExprPlusComma PARANTHESIS_RIGHT SEMICOLON;
ExprPlusComma       ::= Expr | ExprPlusComma COMMA Expr;
Expr                ::= LValue EQUAL Expr | Constant | LValue | THIS | Call | PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT |
                        Expr PLUS Expr | Expr MINUS Expr | Expr MULTIPLY Expr | Expr DIVIDE Expr |
                        Expr MOD Expr | MINUS Expr | Expr LESS Expr | Expr LESS_EQUAL Expr |
                        Expr GREATER Expr | Expr GREATER_EQUAL Expr | Expr EQUAL_EQUAL Expr | Expr NOT_EUQAL Expr |
                        Expr AND_AND Expr | Expr OR_OR Expr | NOT Expr | READ_INTEGER PARANTHESIS_LEFT PARANTHESIS_RIGHT |
                        READ_LINE PARANTHESIS_LEFT PARANTHESIS_RIGHT | NEW IDENTIFIER | NEW_ARRAY PARANTHESIS_LEFT Expr COMMA Type PARANTHESIS_RIGHT |
                        ITOD PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT | DTOI PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT |
                        ITOB PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT | BTOI PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT;
LValue              ::= IDENTIFIER | Expr DOT IDENTIFIER | Expr BRACKETS_LEFT Expr BRACKETS_RIGHT;
Call                ::= IDENTIFIER PARANTHESIS_LEFT Actuals PARANTHESIS_RIGHT | Expr DOT IDENTIFIER PARANTHESIS_LEFT Actuals PARANTHESIS_RIGHT;
Actuals             ::= ExprPlusComma | /* epsilon */ ;
Constant            ::= INT_CONSTANT | DOUBLE_CONSTANT | BOOL_CONSTANT | STRING_CONSTANT | NULL;