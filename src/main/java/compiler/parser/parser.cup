// package and import specifications
package compiler.parser;

import java_cup.runtime.*;
import compiler.scanner.*;

// user code components
init with {: scanner.init() :};
scan with {: return scanner.next_token(); :};

// symbol lists
terminal            VOID, INT, DOUBLE, BOOL, STRING;
terminal            CLASS, INTERFACE, THIS, EXTENDS, IMPLEMENTS;
terminal            FOR, WHILE, IF, ELSE, RETURN, BREAK, CONTINUE;
terminal            NEW, NEW_ARRAY, PRINT, READ_INTEGER, READ_LINE;
terminal            DTOI, ITOB, BTOI, ITOB;
terminal            PRIVATE, PROTECTED, PUBLIC, IMPORT;

terminal            PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal            UMINUS, NOT;
terminal            LESS, LESS_EQUAL, GREATER, GREATER_EQUAL, EQUAL, PLUS_EQUAL, MINUS_EQUAL, MULTIPLY_EQUAL, DIVIDE,EQUAL,
                    EQUAL_EQUAL, NOT_EUQAL, OR_OR, AND_AND;
terminal            SEMICOLON, COMMA, DOT, BRACKETS_LEFT, BRACKETS_RIGHT, PARANTHESIS_LEFT, PARANTHESIS_RIGHT, CURLY_BRACKETS_LEFT,
                    CURLY_BRACKETS_RIGHT;

terminal Integer    INT_CONSTANT;
terminal Double     DOUBLE_CONSTANT;
terminal Boolean    BOOLEAN_CONSTANT;
terminal String     STRING_CONSTANT;
terminal String     NULL;

terminal String     IDENTIFIER;


non terminal        Program, Macro, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, AccessMode,
                    InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, ContinueStmt,
                    PrintStmt, Actuals;

non terminal        ClassDeclExtends, ClassDeclImplements, ClassDeclFields, IdentifierStar, PrototypeStar, VariableDeclStar, StmtStar,
                    ExprOptional;

non terminal Object Constant;
non terminal Object LValue;
non terminal Object Expr;
non terminal Object Call;

// precedence and associativity declarations
precedence nonassoc EQUAL;
precedence left OR_OR;
precedence left AND_AND;
precedence nonassoc EQUAL_EQUAL, NOT_EUQAL;
precedence nonassoc LESS, LESS_EQUAL, GREATER_EQUAL, GREATER_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence nonassoc NOT, UMINUS;
precedence left BRACKETS_LEFT, DOT;

// the grammar
start with Program;

Program             ::= Decl | Program Decl | Macro Program;
Macro               ::= IMPORT STRING_CONSTANT;
Decl                ::= VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl;
VariableDecl        ::= Variable SEMICOLON;
Variable            ::= Type IDENTIFIER;
Type                ::= INT | DOUBLE | BOOL | STRING | IDENTIFIER | Type BRACKETS_LEFT BRACKETS_RIGHT;
FunctionDecl        ::= Type IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT StmtBlock |
                        VOID IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT StmtBlock;
Formals             ::= Variable | Formals COMMA Variable |  /* epsilon */;
ClassDecl           ::= CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements CURLY_BRACKETS_LEFT ClassDeclFields CURLY_BRACKETS_RIGHT;
ClassDeclExtends    ::= EXTENDS IDENTIFIER | /* epsilon */ ;
ClassDeclImplements ::= IMPLEMENTS IdentifierStar | /* epsilon */ ;
IdentifierStar      ::= IDENTIFIER | IdentifierStar COMMA IDENTIFIER;
ClassDeclFields     ::= ClassDeclFields Field | /* epsilon */ ;
Field               ::= AccessMode VariableDecl | AccessMode FunctionDecl;
AccessMode          ::= PRIVATE | PROTECTED | PUBLIC | /* epsilon */ ;
InterfaceDecl       ::= INTERFACE IDENTIFIER CURLY_BRACKETS_LEFT PrototypeStar CURLY_BRACKETS_RIGHT;
PrototypeStar       ::= PrototypeStar Prototype | /* epsilon */ ;
Prototype           ::= Type IdentifierStar PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT SEMICOLON |
                        VOID IdentifierStar PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT SEMICOLON;
StmtBlock           ::= CURLY_BRACKETS_LEFT VariableDeclStar StmtStar CURLY_BRACKETS_RIGHT;
VariableDeclStar    ::= VariableDeclStar VariableDecl | /* epsilon */ ;
StmtStar            ::= StmtStar Stmt | /* epsilon */ ;
Stmt                ::= ExprOptional SEMICOLON | IfStmt | WhileStmt | ForStmt | BreakStmt | ContinueStmt | ReturnStmt | PrintStmt | StmtBlock;
ExprOptional        ::= Expr | /* epsilon */ ;
