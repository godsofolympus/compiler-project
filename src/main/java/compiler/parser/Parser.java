
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.parser;

import java.util.*;

import compiler.scanner.*;
import compiler.AST.*;
import compiler.models.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\005\000\002\046" +
    "\004\000\002\047\004\000\002\047\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\004\000\002\004\002\000\002\005\004\000\002" +
    "\005\002\000\002\006\004\000\002\007\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\004\000" +
    "\002\016\010\000\002\016\010\000\002\012\003\000\002" +
    "\012\005\000\002\012\002\000\002\042\011\000\002\034" +
    "\004\000\002\034\002\000\002\035\004\000\002\035\002" +
    "\000\002\036\003\000\002\036\005\000\002\037\004\000" +
    "\002\037\002\000\002\041\004\000\002\041\004\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\002\000\002\043\007\000\002\045\004\000\002\045\002" +
    "\000\002\044\010\000\002\044\010\000\002\013\006\000" +
    "\002\014\004\000\002\014\002\000\002\015\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\025\003\000\002\025\002\000" +
    "\002\027\010\000\002\026\004\000\002\026\002\000\002" +
    "\030\007\000\002\031\013\000\002\032\005\000\002\050" +
    "\004\000\002\051\004\000\002\033\007\000\002\024\003" +
    "\000\002\024\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\004\000\002\020\010" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\017\003\000\002\017\005\000\002" +
    "\017\006\000\002\022\006\000\002\022\010\000\002\023" +
    "\003\000\002\023\002\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\024\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\041\007\101\ufffd\001\002\000\004" +
    "\002\342\001\002\000\024\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\041\007\101\ufffd\001\002" +
    "\000\022\004\020\005\012\006\024\007\017\010\022\011" +
    "\030\012\025\101\026\001\002\000\004\077\010\001\002" +
    "\000\024\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\041\uffff\101\uffff\001\002\000\006\065\075" +
    "\101\334\001\002\000\010\065\ufff2\071\ufff2\101\ufff2\001" +
    "\002\000\024\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\101\ufff9\001\002\000\024\002" +
    "\ufff7\004\020\005\012\006\024\007\017\010\022\011\030" +
    "\012\025\101\026\001\002\000\024\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\101\ufffc" +
    "\001\002\000\004\062\330\001\002\000\010\065\ufff0\071" +
    "\ufff0\101\ufff0\001\002\000\004\101\104\001\002\000\024" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\101\ufffa\001\002\000\010\065\uffef\071\uffef" +
    "\101\uffef\001\002\000\010\065\uffee\071\uffee\101\uffee\001" +
    "\002\000\010\065\ufff1\071\ufff1\101\ufff1\001\002\000\004" +
    "\101\055\001\002\000\010\065\uffed\071\uffed\101\uffed\001" +
    "\002\000\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\101\ufffb\001\002\000\004\101" +
    "\031\001\002\000\010\014\032\015\uffe4\072\uffe4\001\002" +
    "\000\004\101\054\001\002\000\006\015\035\072\uffe2\001" +
    "\002\000\004\072\042\001\002\000\004\101\037\001\002" +
    "\000\006\063\040\072\uffe3\001\002\000\006\063\uffe1\072" +
    "\uffe1\001\002\000\004\101\041\001\002\000\006\063\uffe0" +
    "\072\uffe0\001\002\000\026\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\036\uffde\037\uffde\040\uffde\073\uffde\101\uffde" +
    "\001\002\000\026\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\036\051\037\044\040\050\073\047\101\uffd8\001\002" +
    "\000\016\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\101" +
    "\uffda\001\002\000\026\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\036\uffdf\037\uffdf\040\uffdf\073\uffdf\101\uffdf\001" +
    "\002\000\016\004\020\005\012\006\024\007\017\010\022" +
    "\101\026\001\002\000\024\002\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\101\uffe6\001\002" +
    "\000\016\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\101" +
    "\uffd9\001\002\000\016\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\101\uffdb\001\002\000\026\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\036\uffdd\037\uffdd\040\uffdd\073\uffdd" +
    "\101\uffdd\001\002\000\026\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\036\uffdc\037\uffdc\040\uffdc\073\uffdc\101\uffdc" +
    "\001\002\000\006\015\uffe5\072\uffe5\001\002\000\004\072" +
    "\056\001\002\000\020\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\073\uffd5\101\uffd5\001\002\000\020\004\062\005" +
    "\012\006\024\007\017\010\022\073\061\101\026\001\002" +
    "\000\006\065\075\101\077\001\002\000\024\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\101\uffd7\001\002\000\004\101\064\001\002\000\020\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\073\uffd6\101\uffd6" +
    "\001\002\000\004\070\065\001\002\000\020\005\012\006" +
    "\024\007\017\010\022\063\uffe7\071\uffe7\101\026\001\002" +
    "\000\006\065\075\101\076\001\002\000\006\063\uffe9\071" +
    "\uffe9\001\002\000\006\063\071\071\072\001\002\000\014" +
    "\005\012\006\024\007\017\010\022\101\026\001\002\000" +
    "\004\062\073\001\002\000\020\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\073\uffd3\101\uffd3\001\002\000\006\063" +
    "\uffe8\071\uffe8\001\002\000\010\065\uffec\071\uffec\101\uffec" +
    "\001\002\000\010\062\ufff3\063\ufff3\071\ufff3\001\002\000" +
    "\004\070\100\001\002\000\020\005\012\006\024\007\017" +
    "\010\022\063\uffe7\071\uffe7\101\026\001\002\000\006\063" +
    "\071\071\102\001\002\000\004\062\103\001\002\000\020" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\073\uffd4\101" +
    "\uffd4\001\002\000\004\070\105\001\002\000\020\005\012" +
    "\006\024\007\017\010\022\063\uffe7\071\uffe7\101\026\001" +
    "\002\000\006\063\071\071\107\001\002\000\004\072\110" +
    "\001\002\000\102\005\ufff5\006\ufff5\007\ufff5\010\ufff5\013" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\043\ufff5\050\ufff5\062\ufff5\070\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\001\002\000\034\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\036\uffea\037" +
    "\uffea\040\uffea\073\uffea\101\uffea\001\002\000\102\005\012" +
    "\006\024\007\017\010\022\013\134\016\126\017\150\020" +
    "\133\022\135\023\141\024\125\025\136\026\120\027\162" +
    "\030\131\031\122\032\143\033\146\034\153\035\147\043" +
    "\127\050\130\062\uffc5\070\115\072\110\073\uffd0\074\156" +
    "\075\161\076\124\077\145\100\140\101\163\001\002\000" +
    "\074\013\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\043\uffc9\050\uffc9" +
    "\062\uffc9\070\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\001\002\000\004\062\327" +
    "\001\002\000\046\013\134\025\136\026\120\030\131\031" +
    "\122\032\143\033\146\034\153\035\147\043\127\050\130" +
    "\070\115\074\156\075\161\076\124\077\145\100\140\101" +
    "\165\001\002\000\004\073\324\001\002\000\050\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\066\uffb8\067\uffb8\071\uffb8\001\002\000" +
    "\004\070\317\001\002\000\074\013\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\043\uffcc\050\uffcc\062\uffcc\070\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\001\002\000\004\070\315\001\002\000\074\013\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\043\uffc8\050\uffc8\062\uffc8\070\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\001\002\000\050\042\uff93\043\uff93\044\uff93" +
    "\045\uff93\046\uff93\051\uff93\052\uff93\053\uff93\054\uff93\056" +
    "\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93" +
    "\066\uff93\067\uff93\071\uff93\001\002\000\004\062\314\001" +
    "\002\000\004\070\304\001\002\000\046\013\134\025\136" +
    "\026\120\030\131\031\122\032\143\033\146\034\153\035" +
    "\147\043\127\050\130\070\115\074\156\075\161\076\124" +
    "\077\145\100\140\101\165\001\002\000\046\013\134\025" +
    "\136\026\120\030\131\031\122\032\143\033\146\034\153" +
    "\035\147\043\127\050\130\070\115\074\156\075\161\076" +
    "\124\077\145\100\140\101\165\001\002\000\004\070\300" +
    "\001\002\000\074\013\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\043" +
    "\uffcd\050\uffcd\062\uffcd\070\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\001\002\000" +
    "\004\070\271\001\002\000\050\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\066\uffb6\067\uffb6\071\uffb6\001\002\000\050\013\134\025" +
    "\136\026\120\030\131\031\122\032\143\033\146\034\153" +
    "\035\147\043\127\050\130\062\uffc5\070\115\074\156\075" +
    "\161\076\124\077\145\100\140\101\165\001\002\000\004" +
    "\101\266\001\002\000\074\013\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\043\uffc7\050\uffc7\062\uffc7\070\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\001" +
    "\002\000\050\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\063\uff91\064\uff91\066\uff91\067\uff91" +
    "\071\uff91\001\002\000\004\062\265\001\002\000\074\013" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\043\uffce\050\uffce\062\uffce" +
    "\070\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\001\002\000\004\070\262\001\002" +
    "\000\044\042\204\043\173\044\176\045\175\046\177\051" +
    "\210\052\206\053\203\054\211\056\174\057\207\060\200" +
    "\061\201\062\uffc6\064\205\066\202\071\uffc6\001\002\000" +
    "\050\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\051\uff92" +
    "\052\uff92\053\uff92\054\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\066\uff92\067\uff92\071\uff92" +
    "\001\002\000\004\070\257\001\002\000\004\070\254\001" +
    "\002\000\004\070\250\001\002\000\052\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\246\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\066\uffb7\067\uffb7\071\uffb7\001\002\000" +
    "\102\005\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\043\ufff6\050\ufff6\062\ufff6\070\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6" +
    "\001\002\000\004\070\243\001\002\000\072\013\134\016" +
    "\126\017\150\020\133\022\135\023\141\024\125\025\136" +
    "\026\120\027\162\030\131\031\122\032\143\033\146\034" +
    "\153\035\147\043\127\050\130\062\uffc5\070\115\072\110" +
    "\073\uffd0\074\156\075\161\076\124\077\145\100\140\101" +
    "\165\001\002\000\050\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\066\uffb5" +
    "\067\uffb5\071\uffb5\001\002\000\050\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\066\uff95\067\uff95\071\uff95\001\002\000\074\013\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\043\uffca\050\uffca\062\uffca\070" +
    "\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca" +
    "\100\uffca\101\uffca\001\002\000\074\013\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\043\uffcb\050\uffcb\062\uffcb\070\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101" +
    "\uffcb\001\002\000\050\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\051\uff94\052\uff94\053\uff94\054\uff94\056\uff94\057" +
    "\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\066\uff94" +
    "\067\uff94\071\uff94\001\002\000\004\070\236\001\002\000" +
    "\052\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uffed\066\uff9c\070\164" +
    "\101\uffed\001\002\000\050\013\134\025\136\026\120\030" +
    "\131\031\122\032\143\033\146\034\153\035\147\043\127" +
    "\050\130\070\115\071\uff96\074\156\075\161\076\124\077" +
    "\145\100\140\101\165\001\002\000\054\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\066\uff9c\067\uff9c\070\164\071\uff9c\001" +
    "\002\000\004\071\235\001\002\000\044\042\204\043\173" +
    "\044\176\045\175\046\177\051\210\052\206\053\203\054" +
    "\211\056\174\057\207\060\200\061\201\063\uffbb\064\205" +
    "\066\202\071\uffbb\001\002\000\006\063\171\071\uff97\001" +
    "\002\000\046\013\134\025\136\026\120\030\131\031\122" +
    "\032\143\033\146\034\153\035\147\043\127\050\130\070" +
    "\115\074\156\075\161\076\124\077\145\100\140\101\165" +
    "\001\002\000\044\042\204\043\173\044\176\045\175\046" +
    "\177\051\210\052\206\053\203\054\211\056\174\057\207" +
    "\060\200\061\201\063\uffba\064\205\066\202\071\uffba\001" +
    "\002\000\046\013\134\025\136\026\120\030\131\031\122" +
    "\032\143\033\146\034\153\035\147\043\127\050\130\070" +
    "\115\074\156\075\161\076\124\077\145\100\140\101\165" +
    "\001\002\000\046\013\134\025\136\026\120\030\131\031" +
    "\122\032\143\033\146\034\153\035\147\043\127\050\130" +
    "\070\115\074\156\075\161\076\124\077\145\100\140\101" +
    "\165\001\002\000\046\013\134\025\136\026\120\030\131" +
    "\031\122\032\143\033\146\034\153\035\147\043\127\050" +
    "\130\070\115\074\156\075\161\076\124\077\145\100\140" +
    "\101\165\001\002\000\046\013\134\025\136\026\120\030" +
    "\131\031\122\032\143\033\146\034\153\035\147\043\127" +
    "\050\130\070\115\074\156\075\161\076\124\077\145\100" +
    "\140\101\165\001\002\000\046\013\134\025\136\026\120" +
    "\030\131\031\122\032\143\033\146\034\153\035\147\043" +
    "\127\050\130\070\115\074\156\075\161\076\124\077\145" +
    "\100\140\101\165\001\002\000\046\013\134\025\136\026" +
    "\120\030\131\031\122\032\143\033\146\034\153\035\147" +
    "\043\127\050\130\070\115\074\156\075\161\076\124\077" +
    "\145\100\140\101\165\001\002\000\046\013\134\025\136" +
    "\026\120\030\131\031\122\032\143\033\146\034\153\035" +
    "\147\043\127\050\130\070\115\074\156\075\161\076\124" +
    "\077\145\100\140\101\165\001\002\000\046\013\134\025" +
    "\136\026\120\030\131\031\122\032\143\033\146\034\153" +
    "\035\147\043\127\050\130\070\115\074\156\075\161\076" +
    "\124\077\145\100\140\101\165\001\002\000\046\013\134" +
    "\025\136\026\120\030\131\031\122\032\143\033\146\034" +
    "\153\035\147\043\127\050\130\070\115\074\156\075\161" +
    "\076\124\077\145\100\140\101\165\001\002\000\046\013" +
    "\134\025\136\026\120\030\131\031\122\032\143\033\146" +
    "\034\153\035\147\043\127\050\130\070\115\074\156\075" +
    "\161\076\124\077\145\100\140\101\165\001\002\000\004" +
    "\101\216\001\002\000\046\013\134\025\136\026\120\030" +
    "\131\031\122\032\143\033\146\034\153\035\147\043\127" +
    "\050\130\070\115\074\156\075\161\076\124\077\145\100" +
    "\140\101\165\001\002\000\046\013\134\025\136\026\120" +
    "\030\131\031\122\032\143\033\146\034\153\035\147\043" +
    "\127\050\130\070\115\074\156\075\161\076\124\077\145" +
    "\100\140\101\165\001\002\000\046\013\134\025\136\026" +
    "\120\030\131\031\122\032\143\033\146\034\153\035\147" +
    "\043\127\050\130\070\115\074\156\075\161\076\124\077" +
    "\145\100\140\101\165\001\002\000\046\013\134\025\136" +
    "\026\120\030\131\031\122\032\143\033\146\034\153\035" +
    "\147\043\127\050\130\070\115\074\156\075\161\076\124" +
    "\077\145\100\140\101\165\001\002\000\050\042\204\043" +
    "\173\044\176\045\175\046\177\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\205\066\202\067\uffaa\071\uffaa\001\002\000\050" +
    "\042\204\043\173\044\176\045\175\046\177\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\205\066\202\067\uffad\071\uffad\001" +
    "\002\000\050\042\204\043\173\044\176\045\175\046\177" +
    "\051\210\052\206\053\203\054\211\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\064\205\066\202\067\uffa8" +
    "\071\uffa8\001\002\000\050\042\204\043\173\044\176\045" +
    "\175\046\177\051\uffac\052\uffac\053\uffac\054\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\205\066" +
    "\202\067\uffac\071\uffac\001\002\000\054\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\066\uff9b\067\uff9b\070\217\071\uff9b\001" +
    "\002\000\050\013\134\025\136\026\120\030\131\031\122" +
    "\032\143\033\146\034\153\035\147\043\127\050\130\070" +
    "\115\071\uff96\074\156\075\161\076\124\077\145\100\140" +
    "\101\165\001\002\000\004\071\221\001\002\000\050\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\066\uff98\067\uff98\071\uff98\001\002" +
    "\000\050\042\uffb3\043\uffb3\044\176\045\175\046\177\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\064\205\066\202\067\uffb3\071" +
    "\uffb3\001\002\000\050\042\204\043\173\044\176\045\175" +
    "\046\177\051\uffab\052\uffab\053\uffab\054\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\205\066\202" +
    "\067\uffab\071\uffab\001\002\000\042\042\204\043\173\044" +
    "\176\045\175\046\177\051\210\052\206\053\203\054\211" +
    "\056\174\057\207\060\200\061\201\064\205\066\202\067" +
    "\225\001\002\000\052\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\066\uff9a\067\uff9a\071\uff9a\001\002\000\050\042\204\043" +
    "\173\044\176\045\175\046\177\051\210\052\206\053\203" +
    "\054\211\056\174\057\207\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\205\066\202\067\uffa7\071\uffa7\001\002\000\050" +
    "\042\204\043\173\044\176\045\175\046\177\051\210\052" +
    "\206\053\203\054\211\056\174\057\207\060\uffa6\061\201" +
    "\062\uffa6\063\uffa6\064\205\066\202\067\uffa6\071\uffa6\001" +
    "\002\000\050\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\205\066\202\067\uffaf" +
    "\071\uffaf\001\002\000\050\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\205\066" +
    "\202\067\uffb1\071\uffb1\001\002\000\050\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\205\066\202\067\uffb0\071\uffb0\001\002\000\050\042" +
    "\204\043\173\044\176\045\175\046\177\051\210\052\206" +
    "\053\203\054\211\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\205\066\202\067\uffa9\071\uffa9\001\002" +
    "\000\050\042\uffb2\043\uffb2\044\176\045\175\046\177\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\205\066\202\067\uffb2\071" +
    "\uffb2\001\002\000\050\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\051\uff99\052\uff99\053\uff99\054\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\066\uff99" +
    "\067\uff99\071\uff99\001\002\000\046\013\134\025\136\026" +
    "\120\030\131\031\122\032\143\033\146\034\153\035\147" +
    "\043\127\050\130\070\115\074\156\075\161\076\124\077" +
    "\145\100\140\101\165\001\002\000\006\063\171\071\240" +
    "\001\002\000\004\062\241\001\002\000\074\013\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\043\uffbc\050\uffbc\062\uffbc\070\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\001\002\000\004\073\uffd1\001\002\000\046" +
    "\013\134\025\136\026\120\030\131\031\122\032\143\033" +
    "\146\034\153\035\147\043\127\050\130\070\115\074\156" +
    "\075\161\076\124\077\145\100\140\101\165\001\002\000" +
    "\042\042\204\043\173\044\176\045\175\046\177\051\210" +
    "\052\206\053\203\054\211\056\174\057\207\060\200\061" +
    "\201\064\205\066\202\071\245\001\002\000\050\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\066\uff9d\067\uff9d\071\uff9d\001\002\000" +
    "\046\013\134\025\136\026\120\030\131\031\122\032\143" +
    "\033\146\034\153\035\147\043\127\050\130\070\115\074" +
    "\156\075\161\076\124\077\145\100\140\101\165\001\002" +
    "\000\050\042\204\043\173\044\176\045\175\046\177\051" +
    "\210\052\206\053\203\054\211\056\174\057\207\060\200" +
    "\061\201\062\uffb9\063\uffb9\064\205\066\202\067\uffb9\071" +
    "\uffb9\001\002\000\046\013\134\025\136\026\120\030\131" +
    "\031\122\032\143\033\146\034\153\035\147\043\127\050" +
    "\130\070\115\074\156\075\161\076\124\077\145\100\140" +
    "\101\165\001\002\000\042\042\204\043\173\044\176\045" +
    "\175\046\177\051\210\052\206\053\203\054\211\056\174" +
    "\057\207\060\200\061\201\064\205\066\202\071\252\001" +
    "\002\000\070\013\134\016\126\017\150\020\133\022\135" +
    "\023\141\024\125\025\136\026\120\027\162\030\131\031" +
    "\122\032\143\033\146\034\153\035\147\043\127\050\130" +
    "\062\uffc5\070\115\072\110\074\156\075\161\076\124\077" +
    "\145\100\140\101\165\001\002\000\074\013\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\043\uffc1\050\uffc1\062\uffc1\070\uffc1\072" +
    "\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\001\002\000\046\013\134\025\136\026\120\030" +
    "\131\031\122\032\143\033\146\034\153\035\147\043\127" +
    "\050\130\070\115\074\156\075\161\076\124\077\145\100" +
    "\140\101\165\001\002\000\042\042\204\043\173\044\176" +
    "\045\175\046\177\051\210\052\206\053\203\054\211\056" +
    "\174\057\207\060\200\061\201\064\205\066\202\071\256" +
    "\001\002\000\050\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\066\uff9e\067" +
    "\uff9e\071\uff9e\001\002\000\046\013\134\025\136\026\120" +
    "\030\131\031\122\032\143\033\146\034\153\035\147\043" +
    "\127\050\130\070\115\074\156\075\161\076\124\077\145" +
    "\100\140\101\165\001\002\000\042\042\204\043\173\044" +
    "\176\045\175\046\177\051\210\052\206\053\203\054\211" +
    "\056\174\057\207\060\200\061\201\064\205\066\202\071" +
    "\261\001\002\000\050\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\066\uffa0" +
    "\067\uffa0\071\uffa0\001\002\000\046\013\134\025\136\026" +
    "\120\030\131\031\122\032\143\033\146\034\153\035\147" +
    "\043\127\050\130\070\115\074\156\075\161\076\124\077" +
    "\145\100\140\101\165\001\002\000\042\042\204\043\173" +
    "\044\176\045\175\046\177\051\210\052\206\053\203\054" +
    "\211\056\174\057\207\060\200\061\201\064\205\066\202" +
    "\071\264\001\002\000\050\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\066" +
    "\uff9f\067\uff9f\071\uff9f\001\002\000\074\013\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\043\uffbe\050\uffbe\062\uffbe\070\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\001\002\000\050\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\066" +
    "\uffa2\067\uffa2\071\uffa2\001\002\000\004\062\270\001\002" +
    "\000\074\013\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\043\uffbf\050" +
    "\uffbf\062\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\100\uffbf\101\uffbf\001\002\000\046\013" +
    "\134\025\136\026\120\030\131\031\122\032\143\033\146" +
    "\034\153\035\147\043\127\050\130\070\115\074\156\075" +
    "\161\076\124\077\145\100\140\101\165\001\002\000\042" +
    "\042\204\043\173\044\176\045\175\046\177\051\210\052" +
    "\206\053\203\054\211\056\174\057\207\060\200\061\201" +
    "\064\205\066\202\071\273\001\002\000\070\013\134\016" +
    "\126\017\150\020\133\022\135\023\141\024\125\025\136" +
    "\026\120\027\162\030\131\031\122\032\143\033\146\034" +
    "\153\035\147\043\127\050\130\062\uffc5\070\115\072\110" +
    "\074\156\075\161\076\124\077\145\100\140\101\165\001" +
    "\002\000\074\013\uffc2\016\uffc2\017\uffc2\020\uffc2\021\275" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\043\uffc2" +
    "\050\uffc2\062\uffc2\070\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\001\002\000\070" +
    "\013\134\016\126\017\150\020\133\022\135\023\141\024" +
    "\125\025\136\026\120\027\162\030\131\031\122\032\143" +
    "\033\146\034\153\035\147\043\127\050\130\062\uffc5\070" +
    "\115\072\110\074\156\075\161\076\124\077\145\100\140" +
    "\101\165\001\002\000\074\013\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\043\uffc4\050\uffc4\062\uffc4\070\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\001" +
    "\002\000\074\013\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\043\uffc3" +
    "\050\uffc3\062\uffc3\070\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\001\002\000\004" +
    "\071\301\001\002\000\050\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\066" +
    "\uffa4\067\uffa4\071\uffa4\001\002\000\050\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\205\066\202\067\uffa5\071\uffa5\001\002\000\050\042" +
    "\uffae\043\uffae\044\176\045\175\046\177\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\205\066\202\067\uffae\071\uffae\001\002" +
    "\000\050\013\134\025\136\026\120\030\131\031\122\032" +
    "\143\033\146\034\153\035\147\043\127\050\130\062\uffc5" +
    "\070\115\074\156\075\161\076\124\077\145\100\140\101" +
    "\165\001\002\000\004\062\306\001\002\000\046\013\134" +
    "\025\136\026\120\030\131\031\122\032\143\033\146\034" +
    "\153\035\147\043\127\050\130\070\115\074\156\075\161" +
    "\076\124\077\145\100\140\101\165\001\002\000\042\042" +
    "\204\043\173\044\176\045\175\046\177\051\210\052\206" +
    "\053\203\054\211\056\174\057\207\060\200\061\201\062" +
    "\310\064\205\066\202\001\002\000\050\013\134\025\136" +
    "\026\120\030\131\031\122\032\143\033\146\034\153\035" +
    "\147\043\127\050\130\070\115\071\uffc5\074\156\075\161" +
    "\076\124\077\145\100\140\101\165\001\002\000\004\071" +
    "\312\001\002\000\070\013\134\016\126\017\150\020\133" +
    "\022\135\023\141\024\125\025\136\026\120\027\162\030" +
    "\131\031\122\032\143\033\146\034\153\035\147\043\127" +
    "\050\130\062\uffc5\070\115\072\110\074\156\075\161\076" +
    "\124\077\145\100\140\101\165\001\002\000\074\013\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\043\uffc0\050\uffc0\062\uffc0\070" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\001\002\000\074\013\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\043\uffbd\050\uffbd\062\uffbd\070\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\001\002\000\004\071\316\001\002\000\050\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\066\uffa3\067\uffa3\071\uffa3\001\002\000" +
    "\046\013\134\025\136\026\120\030\131\031\122\032\143" +
    "\033\146\034\153\035\147\043\127\050\130\070\115\074" +
    "\156\075\161\076\124\077\145\100\140\101\165\001\002" +
    "\000\042\042\204\043\173\044\176\045\175\046\177\051" +
    "\210\052\206\053\203\054\211\056\174\057\207\060\200" +
    "\061\201\063\321\064\205\066\202\001\002\000\014\005" +
    "\012\006\024\007\017\010\022\101\026\001\002\000\006" +
    "\065\075\071\323\001\002\000\050\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\066\uffa1\067\uffa1\071\uffa1\001\002\000\122\002\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\043\uffd2\050\uffd2\062\uffd2\070\uffd2\072\uffd2\073" +
    "\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2" +
    "\001\002\000\042\042\204\043\173\044\176\045\175\046" +
    "\177\051\210\052\206\053\203\054\211\056\174\057\207" +
    "\060\200\061\201\064\205\066\202\071\326\001\002\000" +
    "\050\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4\071\uffb4" +
    "\001\002\000\074\013\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\043" +
    "\uffcf\050\uffcf\062\uffcf\070\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\001\002\000" +
    "\120\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\043\ufff4\050\ufff4\062\ufff4\070\ufff4\072\ufff4" +
    "\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\001\002\000\024\002\ufff7\004\020\005\012\006\024" +
    "\007\017\010\022\011\030\012\025\101\026\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufff8\001\002\000\006" +
    "\062\ufff3\070\335\001\002\000\020\005\012\006\024\007" +
    "\017\010\022\063\uffe7\071\uffe7\101\026\001\002\000\006" +
    "\063\071\071\337\001\002\000\004\072\110\001\002\000" +
    "\034\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\036\uffeb\037\uffeb\040\uffeb\073\uffeb\101" +
    "\uffeb\001\002\000\022\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\101\ufffe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\010\002\003\046\004\047\005\001\001\000" +
    "\002\001\001\000\006\046\004\047\340\001\001\000\022" +
    "\003\013\006\014\007\015\010\010\011\022\016\026\042" +
    "\020\043\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\330\004\331\006\014\007\015\010\010\011\022" +
    "\016\026\042\020\043\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\032\001\001\000\002\001" +
    "\001\000\004\035\033\001\001\000\002\001\001\000\004" +
    "\036\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\042\001\001" +
    "\000\006\040\045\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\051\007\015\010\010\011\022" +
    "\016\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\056\001\001\000" +
    "\010\010\057\011\022\044\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\066\010\065\011\022\012\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\073\010\065\011\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\066" +
    "\010\065\011\022\012\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\066\010\065\011\022\012\105\001\001\000\002\001" +
    "\001\000\004\013\110\001\001\000\004\005\111\001\001" +
    "\000\002\001\001\000\050\006\151\007\015\010\065\011" +
    "\022\013\136\014\115\015\153\017\150\020\143\021\116" +
    "\022\154\025\113\027\141\030\131\031\120\032\112\033" +
    "\122\050\157\051\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\150\020\324\021\116\022\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\150\020\302\021\116\022\154\001\001\000\012\017" +
    "\150\020\301\021\116\022\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\150\020\143\021\116\022\154\025\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\013\136\014\241\015\153\017" +
    "\150\020\143\021\116\022\154\025\113\027\141\030\131" +
    "\031\120\032\112\033\122\050\157\051\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\150\020\166\021\116\022\154\023\165" +
    "\024\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\150\020\171" +
    "\021\116\022\154\001\001\000\002\001\001\000\012\017" +
    "\150\020\233\021\116\022\154\001\001\000\012\017\150" +
    "\020\232\021\116\022\154\001\001\000\012\017\150\020" +
    "\231\021\116\022\154\001\001\000\012\017\150\020\230" +
    "\021\116\022\154\001\001\000\012\017\150\020\227\021" +
    "\116\022\154\001\001\000\012\017\150\020\226\021\116" +
    "\022\154\001\001\000\012\017\150\020\225\021\116\022" +
    "\154\001\001\000\012\017\150\020\223\021\116\022\154" +
    "\001\001\000\012\017\150\020\222\021\116\022\154\001" +
    "\001\000\012\017\150\020\221\021\116\022\154\001\001" +
    "\000\002\001\001\000\012\017\150\020\214\021\116\022" +
    "\154\001\001\000\012\017\150\020\213\021\116\022\154" +
    "\001\001\000\012\017\150\020\212\021\116\022\154\001" +
    "\001\000\012\017\150\020\211\021\116\022\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\150\020\166" +
    "\021\116\022\154\023\217\024\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\150\020\166\021\116\022\154\024\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\150\020\243\021\116" +
    "\022\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\150\020\246\021\116\022\154\001\001\000\002" +
    "\001\001\000\012\017\150\020\250\021\116\022\154\001" +
    "\001\000\002\001\001\000\036\013\136\015\252\017\150" +
    "\020\143\021\116\022\154\025\113\027\141\030\131\031" +
    "\120\032\112\033\122\050\157\051\156\001\001\000\002" +
    "\001\001\000\012\017\150\020\254\021\116\022\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\150" +
    "\020\257\021\116\022\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\150\020\262\021\116\022\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\150\020\271\021\116\022\154\001\001\000" +
    "\002\001\001\000\036\013\136\015\273\017\150\020\143" +
    "\021\116\022\154\025\113\027\141\030\131\031\120\032" +
    "\112\033\122\050\157\051\156\001\001\000\004\026\275" +
    "\001\001\000\036\013\136\015\276\017\150\020\143\021" +
    "\116\022\154\025\113\027\141\030\131\031\120\032\112" +
    "\033\122\050\157\051\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\150\020\143\021" +
    "\116\022\154\025\304\001\001\000\002\001\001\000\012" +
    "\017\150\020\306\021\116\022\154\001\001\000\002\001" +
    "\001\000\014\017\150\020\143\021\116\022\154\025\310" +
    "\001\001\000\002\001\001\000\036\013\136\015\312\017" +
    "\150\020\143\021\116\022\154\025\113\027\141\030\131" +
    "\031\120\032\112\033\122\050\157\051\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\150\020\317\021\116\022\154\001" +
    "\001\000\002\001\001\000\006\010\321\011\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\330\004\332\006\014\007\015\010" +
    "\010\011\022\016\026\042\020\043\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\066\010\065\011\022\012\335\001\001\000\002\001\001" +
    "\000\004\013\337\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

  
                private Lexer scanner;

                public Parser(Lexer scanner) {
                    this.scanner = scanner;
                } 
            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MacroStar Decl DeclStar 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Decl> ds = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ds.add(d); RESULT = new Program(ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Macro ::= IMPORT STRING_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Macro",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MacroStar ::= Macro MacroStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MacroStar",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MacroStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MacroStar",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= VariableDecl 
            {
              Decl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Decl.variableDecl(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= FunctionDecl 
            {
              Decl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl.FunctionDecl f = (Decl.FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ClassDecl 
            {
              Decl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl c = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= InterfaceDecl 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl i = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclStar ::= Decl DeclStar 
            {
              LinkedList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Decl> ds = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ds.add(d); RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclStar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclStar ::= 
            {
              LinkedList<Decl> RESULT =null;
		 RESULT = new LinkedList<Decl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclStar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDeclStar ::= VariableDeclStar VariableDecl 
            {
              LinkedList<Variable> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Variable> vs = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDeclStar ::= 
            {
              LinkedList<Variable> RESULT =null;
		RESULT = new LinkedList<Variable>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableDecl ::= Variable SEMICOLON 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variable ::= Type IDENTIFIER 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PrimitiveType ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.PrimitiveType.NumberType.integerType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PrimitiveType ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = Type.PrimitiveType.NumberType.doubleType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PrimitiveType ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.PrimitiveType.booleanType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PrimitiveType ::= STRING 
            {
              Type RESULT =null;
		 RESULT = Type.PrimitiveType.stringType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= PrimitiveType 
            {
              Type RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type pt = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  Type.nonPrimitiveType(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= Type BRACKETS_LEFT_RIGHT 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Type.arrayType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDecl ::= Type IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT StmtBlock 
            {
              Decl.FunctionDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Variable> f = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtBlock sb = (StmtBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Decl.functionDecl(id, t, f, sb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionDecl ::= VOID IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT StmtBlock 
            {
              Decl.FunctionDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Variable> f = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtBlock sb = (StmtBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Decl.functionDecl(id, Type.voidType(), f, sb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= Variable 
            {
              LinkedList<Variable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Variable> list = new LinkedList<>(); list.add(v); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Formals ::= Formals COMMA Variable 
            {
              LinkedList<Variable> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Variable> f = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.add(v); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formals ::= 
            {
              LinkedList<Variable> RESULT =null;
		 RESULT = new LinkedList<Variable>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements CURLY_BRACKETS_LEFT ClassDeclFields CURLY_BRACKETS_RIGHT 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<String> ci = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ClassField> cf = (LinkedList<ClassField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Decl.classDecl(id, ce, ci, cf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDeclExtends ::= EXTENDS IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDeclExtends ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDeclImplements ::= IMPLEMENTS IdentifierStar 
            {
              LinkedList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDeclImplements ::= 
            {
              LinkedList<String> RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IdentifierStar ::= IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<String> ids = new LinkedList<String>(); ids.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IdentifierStar ::= IdentifierStar COMMA IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ids.add(id); RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDeclFields ::= ClassDeclFields Field 
            {
              LinkedList<ClassField> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ClassField> fs = (LinkedList<ClassField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassField f = (ClassField)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fs.add(f); RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclFields",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDeclFields ::= 
            {
              LinkedList<ClassField> RESULT =null;
		 RESULT = new LinkedList<ClassField>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclFields",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field ::= AccessMode VariableDecl 
            {
              ClassField RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AccessMode am = (AccessMode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ClassField.varField(am, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= AccessMode FunctionDecl 
            {
              ClassField RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AccessMode am = (AccessMode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl.FunctionDecl fd = (Decl.FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ClassField.methodField(am, fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AccessMode ::= PRIVATE 
            {
              AccessMode RESULT =null;
		 RESULT = AccessMode.PRIVATE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessMode",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AccessMode ::= PROTECTED 
            {
              AccessMode RESULT =null;
		 RESULT = AccessMode.PROTECTED; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessMode",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AccessMode ::= PUBLIC 
            {
              AccessMode RESULT =null;
		 RESULT = AccessMode.PUBLIC; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessMode",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AccessMode ::= 
            {
              AccessMode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessMode",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceDecl ::= INTERFACE IDENTIFIER CURLY_BRACKETS_LEFT PrototypeStar CURLY_BRACKETS_RIGHT 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Prototype> ps = (LinkedList<Prototype>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Decl.interfaceDecl(id, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PrototypeStar ::= PrototypeStar Prototype 
            {
              LinkedList<Prototype> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Prototype> ps = (LinkedList<Prototype>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Prototype p = (Prototype)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PrototypeStar ::= 
            {
              LinkedList<Prototype> RESULT =null;
		 RESULT = new LinkedList<Prototype>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= Type IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT SEMICOLON 
            {
              Prototype RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Variable> f = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Prototype(t, id, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prototype",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype ::= VOID IDENTIFIER PARANTHESIS_LEFT Formals PARANTHESIS_RIGHT SEMICOLON 
            {
              Prototype RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Variable> f = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Prototype(null, id, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prototype",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlock ::= CURLY_BRACKETS_LEFT VariableDeclStar StmtStar CURLY_BRACKETS_RIGHT 
            {
              StmtBlock RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Variable> vs = (LinkedList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Stmt> ss = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmtBlock(vs, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtStar ::= Stmt StmtStar 
            {
              LinkedList<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Stmt> ss = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtStar",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtStar ::= 
            {
              LinkedList<Stmt> RESULT =null;
		 RESULT = new LinkedList<Stmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtStar",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= ExprOptional SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Stmt.exprStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= IfStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= WhileStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= ForStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= BreakStmt 
            {
              Stmt RESULT =null;
		 RESULT = Stmt.breakStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= ContinueStmt 
            {
              Stmt RESULT =null;
		 RESULT = Stmt.continueStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ReturnStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= PrintStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= StmtBlock 
            {
              Stmt RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtBlock sb = (StmtBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Stmt.blockStmt(sb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprOptional ::= Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprOptional ::= 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfStmt ::= IF PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT Stmt ElseStmtOptional 
            {
              Stmt RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt el = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Stmt.ifStmt(cond, s, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElseStmtOptional ::= ELSE Stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmtOptional",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ElseStmtOptional ::= 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmtOptional",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStmt ::= WHILE PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT Stmt 
            {
              Stmt RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Stmt.whileStmt(cond, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStmt ::= FOR PARANTHESIS_LEFT ExprOptional SEMICOLON Expr SEMICOLON ExprOptional PARANTHESIS_RIGHT Stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Stmt.forStmt(i, c, u, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnStmt ::= RETURN ExprOptional SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Stmt.returnStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BreakStmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ContinueStmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrintStmt ::= PRINT PARANTHESIS_LEFT ExprPlusComma PARANTHESIS_RIGHT SEMICOLON 
            {
              Stmt RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expr> es = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Stmt.printStmt(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprPlusComma ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> exprs = new LinkedList<>(); exprs.add(e); RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprPlusComma",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprPlusComma ::= ExprPlusComma COMMA Expr 
            {
              LinkedList<Expr> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expr> es = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprPlusComma",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= LValue EQUAL Expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LValue l = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.assignExpr(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Constant 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.constExpr(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= LValue 
            {
              Expr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.lValExpr(lv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= THIS 
            {
              Expr RESULT =null;
		 RESULT = Expr.thisExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Call 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.callExpr(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.ArithExpr.addExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.ArithExpr.subExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr MULTIPLY Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.ArithExpr.multExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr DIVIDE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.ArithExpr.divExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr MOD Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.ArithExpr.modExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.UnOpExpr.ArithExpr.minusExpr(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LESS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.CompExpr.lessExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr LESS_EQUAL Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.CompExpr.lessEqExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GREATER Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.CompExpr.greaterExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GREATER_EQUAL Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.CompExpr.greaterEqExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr EQUAL_EQUAL Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.CompExpr.eqExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr NOT_EQUAL Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.CompExpr.notEqExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr AND_AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.LogicalExpr.andExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr OR_OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.BinOpExpr.LogicalExpr.orExpr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.UnOpExpr.LogicalExpr.notExpr(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= READ_INTEGER PARANTHESIS_LEFT PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		 RESULT = Expr.FunctionExpr.readIntExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= READ_LINE PARANTHESIS_LEFT PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		 RESULT = Expr.FunctionExpr.readLineExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= NEW IDENTIFIER 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expr.InitExpr.objInit(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= NEW_ARRAY PARANTHESIS_LEFT Expr COMMA Type PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Expr.InitExpr.arrInit(e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= ITOD PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Expr.FunctionExpr.itodExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= DTOI PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Expr.FunctionExpr.dtoiExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= ITOB PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Expr.FunctionExpr.itobExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= BTOI PARANTHESIS_LEFT Expr PARANTHESIS_RIGHT 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Expr.FunctionExpr.btoiExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LValue ::= IDENTIFIER 
            {
              LValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LValue.simpleLVal(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LValue ::= Expr DOT IDENTIFIER 
            {
              LValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LValue.dottedLVal(e, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LValue ::= Expr BRACKETS_LEFT Expr BRACKETS_RIGHT 
            {
              LValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr idx = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = LValue.indexedLVal(e, idx); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Call ::= IDENTIFIER PARANTHESIS_LEFT Actuals PARANTHESIS_RIGHT 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> a = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Call.simpleCall(id, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Call ::= Expr DOT IDENTIFIER PARANTHESIS_LEFT Actuals PARANTHESIS_RIGHT 
            {
              Call RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> a = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Call.dottedCall(e, id, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Actuals ::= ExprPlusComma 
            {
              LinkedList<Expr> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> es = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Actuals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Actuals ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Actuals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Constant ::= INT_CONSTANT 
            {
              Constant RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Constant.intConst(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Constant ::= DOUBLE_CONSTANT 
            {
              Constant RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Constant.doubleConst(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= BOOL_CONSTANT 
            {
              Constant RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Constant.boolConst(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= STRING_CONSTANT 
            {
              Constant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Constant.stringConst(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= NULL 
            {
              Constant RESULT =null;
		 RESULT = Constant.nullConst(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
